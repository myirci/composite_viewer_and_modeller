CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(composite_viewer_and_modeller)

SET(CMAKE_BUILD_TYPE Debug)

ADD_DEFINITIONS(-std=c++11)

AUX_SOURCE_DIRECTORY(./src SOURCES)
AUX_SOURCE_DIRECTORY(./src/image/gui SOURCES)
AUX_SOURCE_DIRECTORY(./src/image/algorithms SOURCES)
AUX_SOURCE_DIRECTORY(./src/geometry SOURCES)
AUX_SOURCE_DIRECTORY(./src/modeller SOURCES)
AUX_SOURCE_DIRECTORY(./src/modeller/components SOURCES)
AUX_SOURCE_DIRECTORY(./src/modeller/gui SOURCES)
AUX_SOURCE_DIRECTORY(./src/modeller/optimization SOURCES)
AUX_SOURCE_DIRECTORY(./src/osg SOURCES)
AUX_SOURCE_DIRECTORY(./src/utility SOURCES)
AUX_SOURCE_DIRECTORY(./src/wx SOURCES)

SET(SOURCES ${SOURCES}
            src/geometry/Primitives.hpp
            src/modeller/optimization/ExtractPlaneNormals.hpp
            src/modeller/optimization/OptimizationUtility.hpp
            src/wx/WxGuiId.hpp)

FIND_PACKAGE(Eigen3 3.3 REQUIRED NO_MODULE)
SET(LINK_LIBS Eigen3::Eigen)

INCLUDE_DIRECTORIES(/usr/local/include/eigen3)

FIND_PACKAGE(CGAL COMPONENTS Core REQUIRED)
IF(CGAL_FOUND )
    INCLUDE(${CGAL_USE_FILE})
    set(LINK_LIBS ${LINK_LIBS} ${CGAL_LIBRARIES} ${CGAL_3RD_PARTY_LIBRARIES})
    MESSAGE(STATUS "CGAL_LIBRARIES: " ${CGAL_LIBRARIES})
    MESSAGE(STATUS "CGAL_3RD_PARTY_LIBRARIES: " ${CGAL_3RD_PARTY_LIBRARIES})
ELSE()
    MESSAGE(FATAL_ERROR "CGAL is not found!")
ENDIF()

FIND_PACKAGE(wxWidgets REQUIRED core gl)
IF(wxWidgets_FOUND)
    INCLUDE(${wxWidgets_USE_FILE})
    MESSAGE(STATUS "wxWidgets_USE_FILE: " ${wxWidgets_USE_FILE})
    SET(LINK_LIBS ${LINK_LIBS} ${wxWidgets_LIBRARIES})
    MESSAGE(STATUS "wxWidgets_LIBRARIES: " ${wxWidgets_LIBRARIES})
ELSE()
    MESSAGE(FATAL_ERROR "wxWidgets is not found!")
ENDIF()

FIND_PACKAGE(OpenSceneGraph REQUIRED osgDB osgUtil osgGA osgViewer)
IF(OPENSCENEGRAPH_FOUND)
    INCLUDE_DIRECTORIES(${OPENSCENEGRAPH_INCLUDE_DIRS})
    SET(LINK_LIBS ${LINK_LIBS} ${OPENSCENEGRAPH_LIBRARIES})
    MESSAGE(STATUS "OPENSCENEGRAPH_LIBRARIES: " ${OPENSCENEGRAPH_LIBRARIES})
ELSE(OPENSCENEGRAPH_FOUND)
    MESSAGE(FATAL_ERROR "OSG is not found!")
ENDIF(OPENSCENEGRAPH_FOUND)

# link_directories(/usr/local/lib64)

FIND_PACKAGE(OTB REQUIRED)
if(OTB_FOUND)
    INCLUDE(${OTB_USE_FILE})
    SET(LINK_LIBS ${LINK_LIBS} ${OTB_LIBRARIES})
    MESSAGE(STATUS "OTB: " ${OTB_LIBRARIES})
else(OTB_FOUND)
    MESSAGE(FATAL_ERROR "OTB is not found!")
endif(OTB_FOUND)

# find_package(OriLight REQUIRED)
#if(OriLight_FOUND)
#   include_directories(${OriLight_INCLUDE_DIRS})
#    add_definitions(${OriLight_DEFINITIONS})
#    set(LINK_LIBS ${LINK_LIBS} ${OriLight_LIBRARIES})
#    message(STATUS "OriLight_LIBRARIES: " ${OriLight_LIBRARIES})
#else()
#    message(FATAL_ERROR "OriLight is not found!")
#endif()


FIND_PACKAGE(Ceres 1.9.0 REQUIRED)
IF(Ceres_FOUND)
    INCLUDE_DIRECTORIES(${CERES_INCLUDE_DIRS})
    SET(LINK_LIBS ${LINK_LIBS} ${CERES_LIBRARIES})
    MESSAGE(STATUS "CERES_LIBRARIES: " ${CERES_LIBRARIES})
ELSE()
    MESSAGE(FATAL_ERROR "Ceres solver is not found!")
ENDIF()

ADD_EXECUTABLE(cvm ${SOURCES})
TARGET_LINK_LIBRARIES(cvm ${LINK_LIBS})
